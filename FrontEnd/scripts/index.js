let allWorks = [];
let globalToken = null;

// M√©thode check connexion
const isConnected = () => {
  const token = localStorage.getItem("token");
  if (token && token.length) {
    const objectToken = JSON.parse(token);
    console.log("üöÄ ~ isConnected ~ objectToken:", objectToken);
    globalToken = objectToken.token;

    return true;
  } else {
    return false;
  }
};

const init = async () => {
  let finalResponseCat = await fetchCategories();
  let finalResponseWorks = await fetchWorks();

  finalResponseCat.unshift({
    id: 0,
    name: "Tous",
  }); // Ajoute un nouvel item dans le array
  console.log("üöÄ ~ init ~ finalResponseCat:", finalResponseCat);
  console.log("üöÄ ~ init ~ finalResponseWorks:", finalResponseWorks);

  displayWorks(finalResponseWorks);
  allWorks = finalResponseWorks;
  let iAmConnected = isConnected();
  console.log("üöÄ ~ init ~ iAmConnected:", iAmConnected);
  if (iAmConnected) {
    // Appelle la fonction pour ajouter l'ic√¥ne √† c√¥t√© du titre "Mes Projets"
    showBlackBar();
    //addEditModeIconAndText();
    updateLoginLink();
    // Ajout de l'√©v√©nement de clic √† la div parente
    document
      .querySelector(".modifier-clic")
      .addEventListener("click", function (event) {
        if (event.target && event.target.matches(".modifier-text")) {
          displayModal();
        }
      });
  } else {
    displayButtons(finalResponseCat);
  }
};

const addIconToTitle = () => {
  // V√©rifie d'abord si des √©l√©ments "modifier" existent d√©j√†
  const existingModifierText = document.querySelector(
    ".modifier-clic .modifier-text"
  );
  if (existingModifierText) {
    return; // Si oui, sort de la fonction si des √©l√©ments existent d√©j√† et √©vite de cr√©er un doublon
  }

  const parentDiv = document.querySelector(".modifier-clic");
  // Cr√©e un √©l√©ment <i> pour l'ic√¥ne "modifier"
  const icon = document.createElement("i");
  // Ajoute la classe d'ic√¥ne fa-regular fa-pen-to-square
  icon.classList.add("fa-solid", "fa-pen-to-square");

  // Cr√©e un √©l√©ment <span> pour le texte "modifier"
  const text = document.createElement("span");
  text.textContent = "modifier";
  // Ajoute une classe au <span>
  text.classList.add("modifier-text");

  // Ajoute l'ic√¥ne et le texte √† la div parente
  parentDiv.appendChild(icon);
  parentDiv.appendChild(text);
};

const showBlackBar = () => {
  // Cr√©e une div pour le bandeau noir
  const blackBar = document.createElement("div");
  const modifierClicContainer = document.createElement("div");
  // Ajoute les styles CSS
  blackBar.classList.add("black-bar");
  modifierClicContainer.classList.add("modifier-clic");
  const template = `<div class="edit-mode-container"><i class="fa-solid fa-pen-to-square" aria-hidden="true"></i><span>Modifier</span></div>`;
  blackBar.innerHTML = template;
  modifierClicContainer.innerHTML = template;
  modifierClicContainer.addEventListener("click", () => displayModal());
  // Ins√©rer le bandeau noir avant le body
  document.body.insertBefore(blackBar, document.body.firstChild);
  const targetTitle = document.querySelector("#project-and-icon");
  targetTitle.appendChild(modifierClicContainer);
};

const addEditModeIconAndText = () => {
  // Cr√©er un √©l√©ment <i> pour l'ic√¥ne "Mode √©dition"
  const icon = document.createElement("i");
  // Ajouter les classes d'ic√¥ne appropri√©es
  icon.classList.add("fa-solid", "fa-pen-to-square");

  // Cr√©er un √©l√©ment <span> pour le texte "Mode √©dition"
  const textSpan = document.createElement("span");
  textSpan.textContent = "Mode √©dition";

  // Cr√©er un √©l√©ment <div> pour contenir l'ic√¥ne et le texte
  const editModeContainer = document.createElement("div");
  editModeContainer.classList.add("edit-mode-container");

  // Ajouter l'ic√¥ne et le texte au conteneur
  editModeContainer.appendChild(icon);
  editModeContainer.appendChild(textSpan);

  // Ajouter le conteneur √† la black bar
  const blackBar = document.querySelector(".black-bar");
  blackBar.appendChild(editModeContainer);
};

init();

// Etape 1 : Mettre en place les appels au back
// M√©thode de r√©cup√©ration des travaux dans le back
async function fetchWorks() {
  try {
    const response = await fetch("http://localhost:5678/api/works");
    console.log("üöÄ ~ fetchWorks ~ response:", response);
    let worksData = null;
    if (response.ok) worksData = await response.json();
    else throw new Error("Pas de r√©ponse de notre serveur");
    return worksData;
  } catch (error) {
    console.log("üöÄ ~ fetchWorks ~ error:", error);
  }
}

// M√©thode de r√©cup√©ration des cat√©gories dans le back
async function fetchCategories() {
  try {
    const response = await fetch("http://localhost:5678/api/categories");
    const categoriesData = await response.json();
    return categoriesData;
  } catch (error) {
    console.log("üöÄ ~ fetchCategories ~ error:", error);
    console.error("Erreur lors de la r√©cup√©ration des cat√©gories :", error);
  }
}

// √âtape 2 : Ajouter les m√©thodes display pour afficher les travaux
function displayWorks(works) {
  const gallery = document.querySelector(".gallery");
  gallery.innerHTML = ""; // Efface le contenu pr√©c√©dent de la galerie
  works.forEach((work) => {
    const figure = document.createElement("figure");
    figure.dataset.id = work.id;
    figure.innerHTML = `<img src="${work.imageUrl}" alt="${work.title}"/ ><figcaption>${work.title}</figcaption>`;
    gallery.appendChild(figure);
  });
}

// √âtape 3 : Ajouter les m√©thodes display pour afficher les boutons
function displayButtons(categories) {
  const filters = document.querySelector(".buttons");
  filters.innerHTML = "";

  categories.forEach((category) => {
    const li = document.createElement("li"); // √Ä changer par une creation d'√©l√©ment avec createElement
    const button = document.createElement("button");
    const paragraph = document.createElement("p"); // Cr√©e un √©l√©ment <p>
    const buttonText = document.createTextNode(category.name); // Cr√©e un n≈ìud texte avec le nom de la cat√©gorie
    if (category.id == 0) button.classList.add("active");
    button.dataset.idCategory = category.id;

    button.addEventListener("click", () => filterWorksByCategory(category.id));
    //button.textContent = category.name;
    paragraph.appendChild(buttonText); // Ajoute le texte dans l'√©l√©ment <p>
    button.appendChild(paragraph); // Ajoute l'√©l√©ment <p> √† l'int√©rieur du "button"
    li.appendChild(button);
    filters.appendChild(li);
  });
}

const filterWorksByCategory = (id) => {
  console.log("id", id);
  console.log("allWorks", allWorks);
  if (id !== 0) {
    let filteredWorks = allWorks.filter((work) => work.categoryId === id);
    console.log("üöÄ ~ filterWorksByCategory ~ filteredWorks:", filteredWorks);
    displayWorks(filteredWorks);
  } else {
    displayWorks(allWorks);
  }
};

const buttons = document.querySelectorAll("button");

buttons.forEach((button) => {
  button.addEventListener("click", function () {
    // Supprime la classe 'active' de tous les boutons
    buttons.forEach((btn) => {
      btn.classList.remove("active");
    });

    // Ajoute la classe 'active' au bouton cliqu√©
    this.classList.add("active");
  });
});

// M√©thode du login
const updateLoginLink = () => {
  const loginLink = document.querySelector("nav ul li:nth-child(3) a");
  const modifierButton = document.querySelector(".modifier-clic");

  if (loginLink) {
    const token = localStorage.getItem("token");
    if (token && token.length) {
      loginLink.textContent = "logout";
      loginLink.href = "#";
      loginLink.addEventListener("click", handleLogout);
      modifierButton.style.display = "block"; // Affiche le bouton "modifier" si connect√©
    } else {
      loginLink.textContent = "login"; // Change le texte du lien de connexion
      loginLink.href = "#login";
      modifierButton.style.display = "none"; // Cache le bouton "modifier" si d√©connect√©
    }
  }
};

// M√©thode du logout
const handleLogout = () => {
  // Supprime le token du stockage local
  localStorage.removeItem("token");
  // Recharge la page pour revenir √† l'√©tat initial => page d'accueil normale
  location.reload();
};

// Gestion de la modale
// Affiche la modale
const displayModal = () => {
  const modal = document.getElementById("myModal");
  const modalBackground = document.getElementById("modalBackground");
  const gallery = document.querySelector(".gallery");
  const clonedGallery = gallery.cloneNode(true); // Clone la galerie avec toutes les <figure>

  // Vide la galerie de la modale
  const galleryModal = document.querySelector(".gallery-modal");
  galleryModal.innerHTML = "";

  // Ins√®re la galerie clon√©e dans la galerie de la modale
  galleryModal.appendChild(clonedGallery);

  // Affiche la modale et le fond semi-transparent gris (vu en css)
  modal.style.display = "block";
  modalBackground.style.display = "block";

  // S√©lectionne tous les √©l√©ments <figure> dans la modal
  const figures = document.querySelectorAll(".gallery-modal figure");

  // Cr√©ation d'une <div class="trash-icon"> pour chaque image dans la modale
  figures.forEach((figure) => {
    // V√©rifie si la figure contient d√©j√† une ic√¥ne de poubelle
    if (!figure.querySelector(".trash-icon")) {
      // Cr√©√© une <div class="trash-icon">
      const trashIconDiv = document.createElement("div");
      trashIconDiv.classList.add("trash-icon");
      // Cr√©√© une ic√¥ne trashcan et ajoute la classe appropri√©e
      const trashIcon = document.createElement("i");
      trashIcon.classList.add("fa-solid", "fa-trash-can");
      trashIcon.dataset.id = figure.dataset.id;

      // Ajoute la <i class="fa-solid fa-trash-can"> √† la <div class="trash-icon">
      trashIconDiv.appendChild(trashIcon);

      // Ajoute la <div class="trash-icon" aux <figure>
      figure.appendChild(trashIconDiv);
    }
  });

  // S√©lectionne toutes les ic√¥nes de trash-icon dans la modal
  const trashIcons = document.querySelectorAll(".trash-icon");

  // Ajoute un gestionnaire d'√©v√©nements de clic √† chaque ic√¥ne
  /*trashIcons.forEach((trashIcon) => {
    trashIcon.addEventListener("click", function () {
      const figure = this.closest("figure");

      // Supprime la <figure> de la modale
      figure.remove();
    });
  });*/

  // Suppression des m√©dias depuis une route vers le Backend
  trashIcons.forEach((trashIcon) => {
    trashIcon.addEventListener("click", async function (e) {
      const workId = e.target.dataset.id; // R√©cup√®re l'ID du travail √† supprimer
      const figures = document.querySelectorAll(`figure[data-id="${workId}"]`);

      console.log("üöÄ ~ figures:", figures);
      try {
        const response = await fetch(
          `http://localhost:5678/api/works/${workId}`,
          {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${globalToken}`, // Ajoute le token d'authentification si n√©cessaire
            },
          }
        );

        if (response.ok) {
          // Supprime les √©l√©ments du DOM
          figures.forEach((figure) => {
            figure.remove();
          });
        } else {
          // G√®re les erreurs de suppression
          console.error(
            "Erreur lors de la suppression du travail:",
            response.statusText
          );
        }
      } catch (error) {
        console.error("Erreur lors de la suppression du travail:", error);
      }
    });
  });

  // Ajoute un √©couteur d'√©v√©nements sur l'√©l√©ment "modifier"
  const modifierTextElement = document.querySelector(".modifier-text");
  if (modifierTextElement) {
    modifierTextElement.addEventListener("click", displayModal);
  }

  // Masque la modale
  const closeModal = () => {
    const modal = document.getElementById("myModal");
    const modalBackground = document.getElementById("modalBackground");

    // Cache la modale et le fond semi-transparent
    modal.style.display = "none";
    modalBackground.style.display = "none";
  };

  // Emp√™che le rechargement de la page
  event.preventDefault();

  // Ajoute un √©v√©nement de clic √† la modale pour emp√™cher la propagation des clics aux √©l√©ments enfants
  modal.addEventListener("click", function (event) {
    event.stopPropagation();
  });

  // Ajoute un √©v√©nement de clic √† l'arri√®re-plan pour fermer la modale si on clique √† c√¥t√©
  document
    .getElementById("modalBackground")
    .addEventListener("click", function (event) {
      closeModal(); // Ferme la modale
    });

  // Ajoute un √©couteur d'√©v√©nements sur l'ic√¥ne de fermeture de la modale
  document.querySelector(".close").addEventListener("click", closeModal);
};

// Ferme la modale
const closeModal = () => {
  const modal = document.getElementById("myModal");
  const modalBackground = document.getElementById("modalBackground");

  // Cache la modale et le fond semi-transparent
  modal.style.display = "none";
  modalBackground.style.display = "none";
};

// **** Changement du contenu de la modale pour pouvoir ajouter une photo ****

// Fonction pour changer le contenu de la modale lors du clic sur "Ajouter une photo"
const changeModalContent = () => {
  // Ajoute une classe √† la galerie pour l'effet de transition
  const modal = document.querySelector(".modal");
  modal.classList.add("slide-left");

  // Supprime le contenu de la galerie apr√®s la fin de l'animation
  setTimeout(() => {
    modal.innerHTML = `
      <div class="modal-content add-photo-content">
        <div class="upper-part">
          <div class="return-arrow"></div>
          <h2>Ajout photo</h2>
          <span class="close">&times;</span>
        </div>
        <div class="middle-part">
          <div class="add-gallery">
            <div class="search-photo"><input type="file" id="fileInput" accept="image/*">
          </div>
          <div class="text-photo">
            <div class="title-photo-modal">
              <h3>Titre</h3>
              <input class="title-photo-modal"></input>
            </div>
          </div>
          <div class="category-photo-modal">
            <h3>Cat√©gorie</h3>
            <select class="category-photo-modal">
              <option value="1"></option>
              <option value="2">Objet</option>
              <option value="3">Appartements</option>
              <option value="4">Hotel & restaurants</option>
            </select>
          </div>
        </div>
        </div>
        <div class="lower-part">
          <hr class="separator">
          <div class="submitted">
            <button class="btn-submit" id="return" type="submit" onclick="return closeModal()">Valider</button>
          </div>
        </div>
      </div>
    `;

    // Supprime la classe de transition pour afficher le nouveau contenu sans transition initiale
    modal.classList.remove("slide-left");
  }, 100);
};

// Ajoute un gestionnaire d'√©v√©nements au bouton "Ajouter une photo" pour appeler la fonction changeModalContent
const addButton = document.getElementById("return");
addButton.addEventListener("click", changeModalContent);

/* *** Gestion de l'ajout d'une photo *** */

// Fonction qui g√®re le clic sur la zone de recherche de photo
const handleSearchPhotoClick = () => {
  document.getElementById("fileInput").click();
};

// Gestionnaire de changement de fichier s√©lectionn√©
document.getElementById("fileInput").addEventListener("change", (event) => {
  const file = event.target.files[0];
  // Avec √ßa, on peut utiliser le fichier s√©lectionn√© par l'utilisateur pour l'afficher ou l'envoyer au serveur
});

// Permet d'ajouter une cat√©gorie au m√©dia
const categoryElement = document.querySelector(".category-photo-modal");
const category = categoryElement.value;

// Gestionnaire de clic sur le bouton "Valider"
document.querySelector(".btn-submit").addEventListener("click", async () => {
  // R√©cup√®re les valeurs saisies par l'utilisateur
  const title = document.querySelector(".title-photo-modal").value;
  const category = document.querySelector(".category-photo-modal").value; // Vous devez impl√©menter la logique pour r√©cup√©rer la cat√©gorie s√©lectionn√©e

  // Envoie des donn√©es au backend
  try {
    const response = await fetch("http://localhost:5678/api/works", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${globalToken}`,
      },
      body: JSON.stringify({
        title: title,
        category: category,
      }),
    });

    if (response.ok) {
      // R√©initialise les champs du formulaire apr√®s avoir soumis avec succ√®s les donn√©es
      document.querySelector(".title-photo-modal").value = "";
      document.querySelector(".category-photo-modal").value = "";
      // R√©initialise la s√©lection de l'image si n√©cessaire

      // Fermer la modale
      closeModal();
    } else {
      console.error("Erreur lors de la soumission des donn√©es.");
    }
  } catch (error) {
    console.error("Erreur lors de la soumission des donn√©es :", error);
  }
});
